O#!/usr/bin/env bash
# Usage: lfphp-get mongodb [3.6.8 | 3.6.17 | 4.0.16 | 4.2.8] [--compile]
cd
if [[ -z "$1" ]]; then
    read -r -p "Which version of MongoDB do you wish to install? (3.6.8 / 3.6.17 / 4.0.16 / 4.2.8) " response
else
    response=$1
fi
if [[ "$response" != "3.6.8" && "$response" != "3.6.17" && "$response" != "4.0.16" && "$response" != "4.2.8" ]]; then
    echo -e "ERROR! You must choose from one of these versions: 3.6.8, 3.6.17, 4.0.16, 4.2.8 ABORTING..."
    exit 2
fi
if [[ ! -z "$2" && "$2" == "--compile" ]]; then
    COMPILE=1
fi
if [[ "$response" == "4.2.8" ]]; then
	is_dpkg=`dpkg --version`
	is_openssl_11=`openssl version |cut -c 9-11`
	ok_to_proceed="Y"
	if [[ -z "$is_dpkg" ]]; then
		echo "MongoDB 4.2.8 and above needs to be installed using dpkg"
		echo "Install using 'lfphp-get dpkg'"
		echo "Warning: you'll see lots of dpkg errors: do not worry!"
		ok_to_proceed="N"
	fi
	if [[ "$is_openssl_11" = "1.0" ]]; then
		echo "OpenSSL version needs to be 1.1 or above"
		echo "Install using 'lfphp-get openssl 1.1.1'"
		ok_to_proceed="N"
	fi
	if [[ "$ok_to_proceed" = "N" ]]; then
		echo -e "\nMongoDB Compilation ERROR!  Aborting!\n"
		exit 1
	fi
fi
if [[ -z "$3" || "$3" != "-y" ]]; then
    read -r -p "This installation will destroy any MongoDB databases currently running inside the container. Continue? (y/N) " response2
    if [[ -z "$response2" || "$response2" =~ ^([nN][oO]|[nN])+$ ]]; then
        echo -e "ABORTING... User declined installation."
        exit 9
    fi
fi
pkill mongod
rm -rf /var/lib/mongodb/*
cd /tmp
if [[ ! -z "$COMPILE" ]]; then
    if [[ "$response" == "3.6.8" ]]; then
        wget -O mongodb-src-r3.6.8.tar.gz https://fastdl.mongodb.org/src/mongodb-src-r3.6.8.tar.gz
        tar -xzvf mongodb-src-r3.6.8.tar.gz
        cd mongodb-src-r3.6.8
		pip install --upgrade pip &&
		pip2 install --upgrade pip &&
		pip2 install --user regex &&
		pip install --user -r buildscripts/requirements.txt &&
		#buildscripts/scons.py core --ssl -j 2
		buildscripts/scons.py install --prefix=/usr --ssl -j 2
		if [[ $? -gt 0 ]]; then
			echo -e "\nMongoDB Compilation ERROR!  Aborting!\n"
			exit 1
		fi
        cd
        rm -rf /tmp/mongodb-src-r3.6.8
    elif [[ "$response" == "3.6.17" ]]; then
        wget -O mongodb-src-r3.6.17.tar.gz https://fastdl.mongodb.org/src/mongodb-src-r3.6.17.tar.gz
        tar -xzvf mongodb-src-r3.6.17.tar.gz
        cd mongodb-src-r3.6.17
		pip install --upgrade pip &&
		pip2 install --upgrade pip &&
		pip2 install --user regex &&
		pip install --user -r buildscripts/requirements.txt &&
		#buildscripts/scons.py core --ssl -j 2
		buildscripts/scons.py install --prefix=/usr --ssl -j 2
		if [[ $? -gt 0 ]]; then
			echo -e "\nMongoDB Compilation ERROR!  Aborting!\n"
			exit 1
		fi
		cd
        rm -rf /tmp/mongodb-src-r3.6.17
    elif [[ "$response" == "4.0.16" ]]; then
        wget -O mongodb-src-r4.0.16.tar.gz https://fastdl.mongodb.org/src/mongodb-src-r4.0.16.tar.gz
        tar -xzvf mongodb-src-r4.0.16.tar.gz
        cd mongodb-src-r4.0.16
		pip install --upgrade pip &&
		pip2 install --upgrade pip &&
		pip2 install --user regex &&
		pip install --user -r buildscripts/requirements.txt &&
		#buildscripts/scons.py core --ssl -j 2
		buildscripts/scons.py install --prefix=/usr --ssl -j 2
		if [[ $? -gt 0 ]]; then
			echo -e "\nMongoDB Compilation ERROR!  Aborting!\n"
			exit 1
		fi
		cd
        rm -rf /tmp/mongodb-src-r4.0.16
    elif [[ "$response" == "4.2.8" ]]; then
		is_dpkg=`dpkg --version`
		is_openssl_11=`openssl version |cut -c 9-11`
		ok_to_proceed="Y"
		if [[ -z "$is_dpkg" ]]; then
			echo "MongoDB 4.2.8 and above needs to be installed using dpkg"
			echo "Install using 'lfphp-get dpkg'"
			ok_to_proceed="N"
		fi
		if [[ "$is_openssl_11" = "1.0" ]]; then
			echo "OpenSSL version needs to be 1.1 or above"
			echo "Install using 'lfphp-get openssl 1.1.1'"
			ok_to_proceed="N"
		fi
		if [[ "$ok_to_proceed" = "N" ]]; then
			echo -e "\nMongoDB Compilation ERROR!  Aborting!\n"
			exit 1
		fi
		cd /tmp
		export major_ver=`echo $response |cut -c -3`
		export list="mongodb-org-server mongodb-org-mongos mongodb-org-shell mongodb-org-tools mongodb-org"
		for target in $list
		do
			deb_file="$target".deb
			http://repo.mongodb.org/apt/debian/dists/buster/mongodb-org/4.3/main/binary-amd64/
			src_file=http://repo.mongodb.org/apt/debian/dists/buster/mongodb-org/"$major_ver"/main/binary-amd64/"$target"_"$response"_amd64.deb
			wget -O $deb_file $src_file
			dpkg -i --force-depends --no-triggers /tmp/$deb_file
		done
		rm mongodb-org*
        cd
    fi
    echo -e "\nMongoDB Compilation and Installation DONE!\n"
else
    if [[ "$response" == "3.6.8" ]]; then
        wget -O mongodb-linux-x86_64-3.6.8-lfphp.tar.gz https://files.linuxforphp.net/mongodb-linux-x86_64-3.6.8-lfphp.tar.gz
        tar -xzvf mongodb-linux-x86_64-3.6.8-lfphp.tar.gz
        cd mongodb-linux-x86_64-3.6.8-lfphp
        cp bin/* /usr/bin
        cd
        rm -rf /tmp/mongodb-linux-x86_64-3.6.8-lfphp
    elif [[ "$response" == "3.6.17" ]]; then
        wget -O mongodb-linux-x86_64-3.6.17-lfphp.tar.gz https://files.linuxforphp.net/mongodb-linux-x86_64-3.6.17-lfphp.tar.gz
        tar -xzvf mongodb-linux-x86_64-3.6.17-lfphp.tar.gz
        cd mongodb-linux-x86_64-3.6.17-lfphp
        cp bin/* /usr/bin
        cd
        rm -rf /tmp/mongodb-linux-x86_64-3.6.17-lfphp
    elif [[ "$response" == "4.0.16" ]]; then
        wget -O mongodb-linux-x86_64-4.0.16-lfphp.tar.gz https://files.linuxforphp.net/mongodb-linux-x86_64-4.0.16-lfphp.tar.gz
        tar -xzvf mongodb-linux-x86_64-4.0.16-lfphp.tar.gz
        cd mongodb-linux-x86_64-4.0.16-lfphp
        cp bin/* /usr/bin
        cd
        rm -rf /tmp/mongodb-linux-x86_64-4.0.16-lfphp
    elif [[ "$response" == "4.2.8" || "$response" == "4.3.6" ]]; then
		is_openssl_11=`openssl version |cut -c 9-11`
		ok_to_proceed="Y"
		if [[ "$is_openssl_11" = "1.0" ]]; then
			echo "OpenSSL version needs to be 1.1 or above"
			echo "Install using 'lfphp-get openssl 1.1.1'"
			ok_to_proceed="N"
		fi
		if [[ "$ok_to_proceed" = "N" ]]; then
			echo -e "\nMongoDB Installation ERROR!  Aborting!\n"
			exit 1
		fi
		cd /
		src_root="mongodb-linux-x86_64-"$response"-lfphp"
		wget "https://opensource.unlikelysource.com/"$src_root".zip"
		unzip -u -q $src_root.zip
        cd /tmp
		rm $src_root.zip
        cd
    fi
    echo -e "\nMongoDB Installation DONE!\n"
fi
groupadd -g 101 mongodb
useradd -u 101 -g mongodb mongodb
mkdir -p /var/lib/mongodb
chown -R mongodb:mongodb /var/lib/mongodb
chmod -R 775 /var/lib/mongodb
touch /var/log/mongodb.log
chown mongodb:root /var/log/mongodb.log
cat >/etc/init.d/mongod << 'EOF'
#! /bin/sh
#######################################################################
# Begin /etc/init.d/mongodb
#
# Description : Start the MongoDB Server
#
# Author      : A Caya - andrewscaya@yahoo.ca
#
# Version     : LfPHP 8.1.3
#
########################################################################

### BEGIN INIT INFO
# Provides:          mongod
# Required-Start:    $syslog $local_fs $network
# Should-Start:      $remote_fs
# Required-Stop:     $network
# Should-Stop:       $remote_fs
# Default-Start:     3 4 5
# Default-Stop:      0 1 2 6
# Short-Description: starts mongod
# Description:       starts the MongoDB daemon
# X-LFS-Provided-By: LfPHP 8.1.3
### END INIT INFO

. /lib/lsb/init-functions

#$LastChangedBy: andrew $
#$Date: 2018-06-19 22:18:53 -0500 (Tue, 19 Jun 2018) $

prefix=/usr
exec_prefix=${prefix}

mongod_BIN=${exec_prefix}/bin/mongod
mongod_CONF=/etc/mongodb.conf
mongod_PID=/var/lib/mongodb/mongod.lock

wait_for_pid () {
	try=0

	while test $try -lt 35 ; do

		case "$1" in
			'created')
			if [ -f "$2" ] ; then
				try=''
				break
			fi
			;;

			'removed')
			if [ ! -f "$2" ] ; then
				try=''
				break
			fi
			;;
		esac

		echo -n .
		try=`expr $try + 1`
		sleep 1

	done

}

case "$1" in
	start)
		log_info_msg "Starting MongoDB server..."

		su mongodb -c "$mongod_BIN --config $mongod_CONF --fork"

		if [ "$?" != 0 ] ; then
			log_failure_msg2
			exit
		fi

		wait_for_pid created $mongod_PID

		if [ -n "$try" ] ; then
			log_failure_msg2
		else
			log_success_msg2
		fi
	;;

	stop)
		log_info_msg "Stopping MongoDB Server..."

		if [ ! -r $mongod_PID ] ; then
			log_warning_msg "mongod not running?"
			exit
		fi

		su mongodb -c "$mongod_BIN --config $mongod_CONF --shutdown" && rm -f $mongod_PID

		wait_for_pid removed $mongod_PID

		if [ -n "$try" ] ; then
			log_failure_msg2
		else
			log_success_msg2
		fi
	;;

	status)
		statusproc $mongod_BIN
	;;

	restart)
		$0 stop
		$0 start
	;;

	reload)

		log_info_msg "Reload service MongoDB..."
		$0 stop
		log_success_msg2
	;;

	*)
		echo "Usage: $0 {start|stop|restart|reload|status}"
		exit 1
	;;

esac
EOF
if [[ "$response" == "3.6.8" || "$response" == "3.6.17" || "$response" == "4.0.16" ]]; then
cat >/etc/mongodb.conf << 'EOF'
# mongodb.conf

storage:
  dbPath: /var/lib/mongodb
  journal:
    enabled: true

systemLog:
  destination: file
  logAppend: true
  path: /var/log/mongodb.log

net:
  port: 27017
  bindIp: 0.0.0.0
  #ssl:
    #mode: requireSSL
    #PEMKeyFile: /etc/ssl/mongod.pem
    #PEMKeyPassword: password
    #CAFile: /etc/ssl/ca.crt
    #allowConnectionsWithoutCertificates: true # <-- Add this line if you want ssl WITHOUT authentication

#security:
  #authorization: enabled

#setParameter:
  #authenticationMechanisms: PLAIN,SCRAM-SHA-256,MONGODB-X509

#sharding:
  #clusterRole: "shardsvr"


# how the process runs
processManagement:
  timeZoneInfo: /usr/share/zoneinfo

#security:

#operationProfiling:

#replication:

## Enterprise-Only Options:

#auditLog:

#snmp:
EOF
elif [[ "$response" == "4.2.8" ]]; then
cat >/etc/mongodb.conf << 'EOF'
# mongodb.conf

storage:
  dbPath: /var/lib/mongodb
  journal:
    enabled: true

systemLog:
  destination: file
  logAppend: true
  path: /var/log/mongodb.log

net:
  port: 27017
  bindIp: 0.0.0.0
  #tls:
    #mode: requireTLS
    #certificateKeyFile: /etc/ssl/mongod.pem
    #CAFile: /etc/ssl/ca.crt
    #disabledProtocols: TLS1_0,TLS1_1
    #allowConnectionsWithoutCertificates: true # <-- Add this line if you want ssl WITHOUT authentication    
    #********* see: https://docs.mongodb.com/manual/reference/expansion-directives/#externally-sourced-configuration-file-values *****
	#certificateKeyFilePassword:
    #  __rest: "https://myrestserver.example.net/api/config/myCertKeyFilePassword"
    #  type: "string"
    #  digest: b08519162ba332985ac18204851949611ef73835ec99067b85723e10113f5c26
    #  digest_key: 6d795365637265744b65795374756666
    #********* see: https://docs.mongodb.com/manual/reference/expansion-directives/#externally-sourced-configuration-file-values *****

#security:
  #authorization: enabled

#setParameter:
  #authenticationMechanisms: PLAIN,SCRAM-SHA-256,MONGODB-X509

#sharding:
  #clusterRole: "shardsvr"

# how the process runs
processManagement:
  timeZoneInfo: /usr/share/zoneinfo

#security:

#operationProfiling:

#replication:

## Enterprise-Only Options:

#auditLog:

#snmp:
EOF
fi

chmod +x /etc/init.d/mongod
ln -sf  ../init.d/mongod /etc/rc.d/rc0.d/K28mongod
ln -sf  ../init.d/mongod /etc/rc.d/rc1.d/K28mongod
ln -sf  ../init.d/mongod /etc/rc.d/rc2.d/K28mongod
ln -sf  ../init.d/mongod /etc/rc.d/rc3.d/S32mongod
ln -sf  ../init.d/mongod /etc/rc.d/rc4.d/S32mongod
ln -sf  ../init.d/mongod /etc/rc.d/rc5.d/S32mongod
ln -sf  ../init.d/mongod /etc/rc.d/rc6.d/K28mongod
rm -rf /var/lib/mongodb/*
mkdir -p /etc/sv/mongod/supervise &&
chmod -R 700 /etc/sv/mongod/supervise &&
touch /etc/sv/mongod/run &&
echo -e "#!/usr/bin/env bash\n" > /etc/sv/mongod/run &&
echo "exec su mongodb -c '/usr/bin/mongod --config /etc/mongodb.conf --fork'" >> /etc/sv/mongod/run &&
chmod +x /etc/sv/mongod/run &&
ln -s /etc/sv/mongod /services
/etc/init.d/mongod start
cd
